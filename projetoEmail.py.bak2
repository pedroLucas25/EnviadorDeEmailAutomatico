#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.4
#  in conjunction with Tcl version 8.6
#    Aug 17, 2020 11:56:46 PM -03  platform: Linux

import sys
import tkinter as tk
from tkinter import * 
from tkinter import messagebox
from tkinter import filedialog
import projetoEmail_support
from projetoEmail_support import *
from funcTechsoup import *

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    projetoEmail_support.set_Tk_var()
    top = Toplevel1 (root)
    projetoEmail_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    projetoEmail_support.set_Tk_var()
    top = Toplevel1 (w)
    projetoEmail_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:

    def envio(self):
        print(self.Text1.get("1.0",END))

    def cancelLogin(self):
        msg = messagebox.askyesno('Mensagem autom치tica', 'Tem certeza que deseja sair?')
        if (msg):
            exit()

    def ativaAnexo (self):
        if projetoEmail_support.che59.get() == 1:
            self.carregaAnexo.configure(state=NORMAL)
        elif projetoEmail_support.che59.get() == 0:
            self.carregaAnexo.configure(state=DISABLED)

    def carregaArquivos(self):        
        self.local = filedialog.askopenfilename(initialdir="~/", title="Selecione o arquivo", filetypes=(("XLSX", "*.xlsx"),("CSV", "*.csv"), ("Todos os arquivos", "*.*")))
        #print(self.local[-3:])

        if self.local[-3:] == "lsx":
            self.mostraPlanilha.delete(0,END)
            self.mostraPlanilhaEmail.delete(0,END)
            self.arquivo = abreAqruivoExcel(self.local,"Planilha1")
            self.lista = convertePandasLista(self.arquivo)

            for i in range(len(self.lista)):
                self.mostraPlanilha.insert(END, self.lista[i][0])

            for i in range(len(self.lista)):
                self.mostraPlanilhaEmail.insert(END, self.lista[i][1])

        elif self.local[-3:] == "csv":
            self.mostraPlanilha.delete(0,END)
            self.mostraPlanilhaEmail.delete(0,END)
            self.arquivo = abreArquivoCsv(self.local)
            self.lista = convertePandasLista(self.arquivo)

            for i in range(len(self.lista)):
                self.mostraPlanilha.insert(END, self.lista[i][0])

            for i in range(len(self.lista)):
                self.mostraPlanilhaEmail.insert(END, self.lista[i][1])

        elif self.local[-3:] != "csv" or self.local[-3:] != "lsx":
            messagebox.showwarning("Mensagem autom치tica", "Arquivo incorreto!")
            self.arquivo = []
            self.lista = []

    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        top.geometry("961x670+291+11")
        top.minsize(1, 1)
        top.maxsize(2375, 738)
        top.resizable(1, 1)
        top.title("Mensagens autom치tica")
        top.configure(highlightcolor="black")

        self.Frame1 = tk.Frame(top)
        self.Frame1.place(relx=0.01, rely=0.015, relheight=0.975, relwidth=0.982)

        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")

        self.mostraPlanilha = tk.Listbox(self.Frame1)
        self.mostraPlanilha.place(relx=0.011, rely=0.046, relheight=0.478
                , relwidth=0.47)
        self.mostraPlanilha.configure(background="white")
        self.mostraPlanilha.configure(font="TkFixedFont")
        self.mostraPlanilha.configure(selectbackground="blue")
        self.mostraPlanilha.configure(selectforeground="white")

        self.carregaPlanilha = tk.Button(self.Frame1)
        self.carregaPlanilha.place(relx=0.826, rely=0.689, height=35, width=150)
        self.carregaPlanilha.configure(activebackground="#f9f9f9")
        self.carregaPlanilha.configure(text='''Carregar arquivo''')
        self.carregaPlanilha.configure(command=self.carregaArquivos)

        self.btnSair = tk.Button(self.Frame1)
        self.btnSair.place(relx=0.826, rely=0.888, height=35, width=150)
        self.btnSair.configure(activebackground="#f9f9f9")
        self.btnSair.configure(text='''Sair''')
        self.btnSair.configure(command=self.cancelLogin)

        self.mostraPlanilhaEmail = tk.Listbox(self.Frame1)
        self.mostraPlanilhaEmail.place(relx=0.54, rely=0.046, relheight=0.478
                , relwidth=0.448)
        self.mostraPlanilhaEmail.configure(background="white")
        self.mostraPlanilhaEmail.configure(font="TkFixedFont")
        self.mostraPlanilhaEmail.configure(selectbackground="blue")
        self.mostraPlanilhaEmail.configure(selectforeground="white")

        self.Label1 = tk.Label(self.Frame1)
        self.Label1.place(relx=0.011, rely=0.551, height=15, width=438)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(text='''Digite aqui a mensagem que ser치 enviada''')

        self.Label2 = tk.Label(self.Frame1)
        self.Label2.place(relx=0.011, rely=0.015, height=15, width=441)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(text='''Nome''')

        self.Label3 = tk.Label(self.Frame1)
        self.Label3.place(relx=0.54, rely=0.015, height=15, width=427)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(text='''E-mail''')

        self.carregaAnexo = tk.Button(self.Frame1)
        self.carregaAnexo.place(relx=0.826, rely=0.781, height=35, width=150)
        self.carregaAnexo.configure(activebackground="#f9f9f9")
        self.carregaAnexo.configure(text='''Carregar anexo''')
        self.carregaAnexo.configure(state=DISABLED)

        self.checkAnexo = tk.Checkbutton(self.Frame1)
        self.checkAnexo.place(relx=0.498, rely=0.781, relheight=0.055
                , relwidth=0.292)
        self.checkAnexo.configure(activebackground="#f9f9f9")
        self.checkAnexo.configure(justify='left')
        self.checkAnexo.configure(text='''Seu e-mail possui anexo?''')
        self.checkAnexo.configure(variable=projetoEmail_support.che59)
        self.checkAnexo.configure(command=self.ativaAnexo)

        self.btnEnviar = tk.Button(self.Frame1)
        self.btnEnviar.place(relx=0.826, rely=0.582, height=35, width=150)
        self.btnEnviar.configure(activebackground="#f9f9f9")
        self.btnEnviar.configure(state='active')
        self.btnEnviar.configure(text='''Enviar''')
        self.btnEnviar.configure(command=self.envio)

        self.Label4 = tk.Label(self.Frame1)
        self.Label4.place(relx=0.498, rely=0.689, height=35, width=280)
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(text='''Carregar e-mails para envio''')

        self.Label4_3 = tk.Label(self.Frame1)
        self.Label4_3.place(relx=0.498, rely=0.582, height=35, width=281)
        self.Label4_3.configure(activebackground="#f9f9f9")
        self.Label4_3.configure(text='''Enviar e-mails''')

        self.Label4_4 = tk.Label(self.Frame1)
        self.Label4_4.place(relx=0.498, rely=0.888, height=36, width=271)
        self.Label4_4.configure(activebackground="#f9f9f9")
        self.Label4_4.configure(text='''Sair do programa''')

        self.Text1 = tk.Text(self.Frame1)
        self.Text1.place(relx=0.011, rely=0.582, relheight=0.398, relwidth=0.475)

        self.Text1.configure(background="white")
        self.Text1.configure(font="TkTextFont")
        self.Text1.configure(selectbackground="blue")
        self.Text1.configure(selectforeground="white")
        self.Text1.configure(wrap="word")

    @staticmethod
    def popup1(event, *args, **kwargs):
        Popupmenu1 = tk.Menu(root, tearoff=0)
        Popupmenu1.post(event.x_root, event.y_root)

if __name__ == '__main__':
    vp_start_gui()





