#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.4
#  in conjunction with Tcl version 8.6
#    Aug 18, 2020 09:57:36 AM -03  platform: Linux

import sys
import tkinter as tk
from tkinter import * 
from tkinter import messagebox
from tkinter import filedialog
import projetoEmail_support
from projetoEmail_support import *
from funcTechsoup import *
from funcEmail import *

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    projetoEmail_support.set_Tk_var()
    top = Toplevel1 (root)
    projetoEmail_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    projetoEmail_support.set_Tk_var()
    top = Toplevel1 (w)
    projetoEmail_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:

    def envio(self):
        self.user = self.txtUser.get()
        self.passw = self.txtPass.get()
        self.assunto = self.Entry2.get()
        self.msg = self.Text1.get("1.0", END)

        if len(self.user) == 0 or len(self.passw) == 0:
            messagebox.showwarning("Mensagem automática",("E-mail de acesso ou senha não digitado"))
        else:
            if projetoEmail_support.che59.get() == 0:
                self.ret = enviaEmailSemAnexo(self.msg,self.assunto,self.user,self.passw,self.lista)
                if self.ret == 0:
                    messagebox.showinfo("Mensagem automática", "Concluído com sucesso")
            elif projetoEmail_support.che59.get() == 1:
                self.ret = enviaEmailComAnexo(self.msg,self.assunto,self.user,self.passw,self.lista,self.EndAnexo)
                if self.ret == 0:
                    messagebox.showinfo("Mensagem automática", "Concluído com sucesso")


    def cancelLogin(self):
        msg = messagebox.askyesno('Mensagem automática', 'Tem certeza que deseja sair?')
        if (msg):
            exit()

    def anexar (self):
        self.EndAnexo = filedialog.askopenfilename(initialdir="~/", title="Selecione o arquivo", filetypes=(("PDF", "*.pdf"),("Todos os arquivos", "*.*")))

        self.EndAnexo = self.EndAnexo.replace('/','\\\\')

        print(self.EndAnexo)

    def ativaAnexo (self):
        if projetoEmail_support.che59.get() == 1:
            self.carregaAnexo.configure(state=NORMAL)
        elif projetoEmail_support.che59.get() == 0:
            self.carregaAnexo.configure(state=DISABLED)

    def carregaArquivos(self):        
        self.local = filedialog.askopenfilename(initialdir="~/", title="Selecione o arquivo", filetypes=(("CSV", "*.csv"),("XLSX", "*.xlsx"), ("Todos os arquivos", "*.*")))
        #print(self.local)

        if self.local[-3:] == "lsx":
            self.mostraPlanilha.delete(0,END)
            self.mostraPlanilhaEmail.delete(0,END)
            self.arquivo = abreAqruivoExcel(self.local,"Planilha1")
            self.lista = convertePandasLista(self.arquivo)

            for i in range(len(self.lista)):
                self.mostraPlanilha.insert(END, self.lista[i][0])

            for i in range(len(self.lista)):
                self.mostraPlanilhaEmail.insert(END, self.lista[i][1])

        elif self.local[-3:] == "csv":
            self.mostraPlanilha.delete(0,END)
            self.mostraPlanilhaEmail.delete(0,END)
            self.arquivo = abreArquivoCsv(self.local)
            #print("Aqui1")
            self.lista = convertePandasLista(self.arquivo)
            #print("Aqui2")

            #print(self.lista)

            for i in range(len(self.lista)):
                self.mostraPlanilha.insert(END, self.lista[i][0])

            for i in range(len(self.lista)):
                self.mostraPlanilhaEmail.insert(END, self.lista[i][1])

        elif self.local[-3:] != "csv" or self.local[-3:] != "lsx":
            messagebox.showwarning("Mensagem automática", "Arquivo inválido!")
            self.arquivo = []
            self.lista = []

    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        top.geometry("961x670+1124+11")
        top.minsize(1, 1)
        top.maxsize(2375, 738)
        top.resizable(1, 1)
        top.title("Mensagens automáticas")
        top.configure(highlightcolor="black")

        self.Frame1 = tk.Frame(top)
        self.Frame1.place(relx=0.01, rely=0.015, relheight=0.975, relwidth=0.979)

        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")

        self.mostraPlanilha = tk.Listbox(self.Frame1)
        self.mostraPlanilha.place(relx=0.015, rely=0.046, relheight=0.386
                , relwidth=0.48)
        self.mostraPlanilha.configure(background="white")
        self.mostraPlanilha.configure(font="TkFixedFont")
        self.mostraPlanilha.configure(selectbackground="blue")
        self.mostraPlanilha.configure(selectforeground="white")

        self.carregaPlanilha = tk.Button(self.Frame1)
        self.carregaPlanilha.place(relx=0.826, rely=0.689, height=35, width=150)
        self.carregaPlanilha.configure(activebackground="#f9f9f9")
        self.carregaPlanilha.configure(text='''Carregar arquivo''')
        self.carregaPlanilha.configure(command=self.carregaArquivos)

        self.btnSair = tk.Button(self.Frame1)
        self.btnSair.place(relx=0.826, rely=0.888, height=35, width=150)
        self.btnSair.configure(activebackground="#f9f9f9")
        self.btnSair.configure(text='''Sair''')
        self.btnSair.configure(command=self.cancelLogin)

        self.mostraPlanilhaEmail = tk.Listbox(self.Frame1)
        self.mostraPlanilhaEmail.place(relx=0.51, rely=0.046, relheight=0.386
                , relwidth=0.481)
        self.mostraPlanilhaEmail.configure(background="white")
        self.mostraPlanilhaEmail.configure(font="TkFixedFont")
        self.mostraPlanilhaEmail.configure(selectbackground="blue")
        self.mostraPlanilhaEmail.configure(selectforeground="white")

        self.Label1 = tk.Label(self.Frame1)
        self.Label1.place(relx=0.011, rely=0.704, height=15, width=437)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(text='''Mensagem do e-mail''')

        self.Label2 = tk.Label(self.Frame1)
        self.Label2.place(relx=0.011, rely=0.015, height=15, width=440)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(text='''Nome''')

        self.Label3 = tk.Label(self.Frame1)
        self.Label3.place(relx=0.54, rely=0.015, height=15, width=426)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(text='''E-mail''')

        self.carregaAnexo = tk.Button(self.Frame1)
        self.carregaAnexo.place(relx=0.826, rely=0.781, height=35, width=150)
        self.carregaAnexo.configure(activebackground="#f9f9f9")
        self.carregaAnexo.configure(text='''Carregar anexo''')
        self.carregaAnexo.configure(command=self.anexar)
        self.carregaAnexo.configure(state=DISABLED)

        self.checkAnexo = tk.Checkbutton(self.Frame1)
        self.checkAnexo.place(relx=0.498, rely=0.781, relheight=0.055
                , relwidth=0.291)
        self.checkAnexo.configure(activebackground="#f9f9f9")
        self.checkAnexo.configure(justify='left')
        self.checkAnexo.configure(text='''Seu e-mail possui anexo?''')
        self.checkAnexo.configure(variable=projetoEmail_support.che59)
        self.checkAnexo.configure(command=self.ativaAnexo)

        self.btnEnviar = tk.Button(self.Frame1)
        self.btnEnviar.place(relx=0.826, rely=0.582, height=35, width=150)
        self.btnEnviar.configure(activebackground="#f9f9f9")
        self.btnEnviar.configure(state='active')
        self.btnEnviar.configure(text='''Enviar''')
        self.btnEnviar.configure(command=self.envio)

        self.Label4 = tk.Label(self.Frame1)
        self.Label4.place(relx=0.498, rely=0.689, height=35, width=278)
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(text='''Carregar e-mails para envio''')

        self.Label4_3 = tk.Label(self.Frame1)
        self.Label4_3.place(relx=0.498, rely=0.582, height=35, width=280)
        self.Label4_3.configure(activebackground="#f9f9f9")
        self.Label4_3.configure(text='''Enviar e-mails''')

        self.Label4_4 = tk.Label(self.Frame1)
        self.Label4_4.place(relx=0.498, rely=0.888, height=36, width=270)
        self.Label4_4.configure(activebackground="#f9f9f9")
        self.Label4_4.configure(text='''Sair do programa''')

        self.Text1 = tk.Text(self.Frame1)
        self.Text1.place(relx=0.015, rely=0.735, relheight=0.245, relwidth=0.477)

        self.Text1.configure(background="white")
        self.Text1.configure(font="TkTextFont")
        self.Text1.configure(selectbackground="blue")
        self.Text1.configure(selectforeground="white")
        self.Text1.configure(wrap="word")

        self.txtUser = tk.Entry(self.Frame1)
        self.txtUser.place(relx=0.117, rely=0.475,height=27, relwidth=0.368)
        self.txtUser.configure(background="white")
        self.txtUser.configure(font="TkFixedFont")
        self.txtUser.configure(selectbackground="blue")
        self.txtUser.configure(selectforeground="white")

        self.txtPass = tk.Entry(self.Frame1)
        self.txtPass.place(relx=0.616, rely=0.475,height=27, relwidth=0.368)
        self.txtPass.configure(background="white")
        self.txtPass.configure(font="TkFixedFont")
        self.txtPass.configure(selectbackground="blue")
        self.txtPass.configure(selectforeground="white")

        self.Label5 = tk.Label(self.Frame1)
        self.Label5.place(relx=0.011, rely=0.475, height=25, width=91)
        self.Label5.configure(activebackground="#f9f9f9")
        self.Label5.configure(text='''E-mail Gmail:''')

        self.Label5_2 = tk.Label(self.Frame1)
        self.Label5_2.place(relx=0.51, rely=0.475, height=25, width=90)
        self.Label5_2.configure(activebackground="#f9f9f9")
        self.Label5_2.configure(text='''Senha:''')

        self.Entry2 = tk.Entry(self.Frame1)
        self.Entry2.place(relx=0.015, rely=0.628,height=27, relwidth=0.477)
        self.Entry2.configure(background="white")
        self.Entry2.configure(font="TkFixedFont")

        self.Label1_1 = tk.Label(self.Frame1)
        self.Label1_1.place(relx=0.011, rely=0.597, height=15, width=437)
        self.Label1_1.configure(activebackground="#f9f9f9")
        self.Label1_1.configure(text='''Assunto do e-mail''')

        self.user = 0
        self.passw = 0
        self.assunto = 0
        self.arquivo = 0
        self.lista = 0
        self.msg = 0
        self.arquivoAnexo = 0

    @staticmethod
    def popup1(event, *args, **kwargs):
        Popupmenu1 = tk.Menu(root, tearoff=0)
        Popupmenu1.post(event.x_root, event.y_root)

if __name__ == '__main__':
    vp_start_gui()





